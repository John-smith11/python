# 一、形参与实参介绍
# 形参：在定义函数阶段所定义的参数称为形式参数，简称形参，相当于变量名
def func(x,y):
    ...

# 实参：在调用函数阶段传入的值称为实际参数，简称实参，相当于变量值
func(1,2)

# 形参与实参的关系：
#   在调用阶段，实参（变量值）会绑定给形参（变量名），此绑定关系只能在函数体内使用
#   实参与形参的绑定关系在函数调用时生效，函数调用结束后解除绑定

# 实参是传入的值，值可以是以下形式：
# 形式一：
# func(1,2)

# 形式二：
# a = 1
# b = 2
#
# func(a,b)

# 形式三：
# func(func1(1,2),func(2,3))


# 二、形参与实参的具体使用
# 2.1 位置参数：按从左到右的顺序依次定义的参数称之为位置参数
# 位置形参：在函数定义阶段，按照从左到右的顺序直接定义的“变量名”
#      特点：必须被传值，不能多不能少
def func(x,y):
    pass

# 位置实参：在函数调用阶段，按照从左到右的顺序依次传入的值
#      特点：按照顺序与形参一一对应
func(1,2)

# 2.2 关键字参数
# 关键字实参：在函数调用阶段，按照 key = value 的形式传入的值
#       特点：指名道姓的给形参传值，完全不参照顺序
func(y=2,x=1)

# 混合使用，强调：
# a.位置实参必须放在关键字实参前
# func(1,y=2)
# func(y=1,2)  # 报错

# b.不能为同一个形参重复传值

# 2.3 默认参数
# 默认形参：在函数定义阶段，就已经被赋值的形参，称之为默认参数
#      特点：在定义阶段就已经被赋值，在调用阶段可以不赋值，也可以赋值
def func(x,y=1):
    ...

# 位置形参与默认形参混用，强调：
# a.位置形参必须在默认形参左边
# def func(x=1,y):  # 报错
#     ...

# b.默认形参的值是在函数定义阶段被赋值的，准确的说被赋予的是值的内存地址
# python中传值的本质是内存地址的传递
# 示范1
# m=2
# def func(x, y=m):  # y==>2的内存地址
#     print(x,y)
#
# m=3
# func(1)  # 1 2

# 示范2
# m=[111,]
# def func(x, y=m):  # y==>[111,]的内存地址
#     print(x,y)
#
# m.append(222)
# func(1)  # 1 [111, 222]

# c.虽然默认值可以被指定为任意数据类型，但是不推荐使用可变类型
# 函数最理想的状态：函数的调用只跟函数本身有关系，不受外界代码的影响
# def func(x,y,z,l=[]):  # 语法没问题，但是不好
#     l.append(x)
#     l.append(y)
#     l.append(z)
#     print(l)

# def func(x,y,z,l=None):  # 推荐这样优化
#     if l is None:
#         l=[]
#     l.append(x)
#     l.append(y)
#     l.append(z)
#     print(l)

# 2.4 可变长度的参数（*与**的用法）
# 可变长度指的是在调用函数时，传入的值（实参）的个数不固定
# 而实参是用来为形参赋值的，所以对应看，针对溢出的实参必须有对应的形参来接收

# 2.4.1 可变长度的位置参数
# I：*形参名：用来接收溢出的位置参数，溢出的位置实参会被*保存成元组的格式然后赋值给紧跟其后的形参名
# 规范的写法，把*后面的形参取名args,即*args
# def func(x,y,*z):  # z=(3,4,5)
#     print(x,y,z)
#
# func(1,2,3,4,5)  # 1 2 (3, 4, 5)
#
# def func(x,y,*args):
#     pass

# II: *可以用在实参中，实参中带*，先将*后的值按顺序打散成位置参数
# def func(x,y,z):
#     print(x,y,z)
#
# func(*[11,22,33])  # 同func(11,22,33)

# III：形参与实参中都带*
def func(x,y,*args):
    print(x,y,args)

# func(1,2,[3,4,5])  # 1 2 ([3, 4, 5],)
# func(1,2,*[3,4,5])  # 1 2 (3, 4, 5)

# 2.4.2 可变长度的关键字参数
# I：**形参名：用来接收溢出的关键字实参，**会将溢出的关键字实参保存成字典格式，然后赋值给紧跟其后的形参名
# 规范的写法，把**后面的形参取名kwargs,即*kwargs
# def func(x,y,**kwargs):  # z=(3,4,5)
#     print(x,y,kwargs)
#
# func(1,2,a=1,b=2,c=3)  # 1 2 {'a': 1, 'b': 2, 'c': 3}

# II: **可以用在实参中（**后跟的只能是字典），实参中带**，先将**后的值打散成关键字实参
# def func(a,b,c):
#     print(a,b,c)
#
# func(**{'a': 1, 'b': 2, 'c': 3})  # 同func(a=1,b=2,c=3)

# III:形参与实参中都带**
def func(x,y,**kwags):
    print(x,y,kwags)

# func(y=22,x=11,a=33,b=44)
func(**{'y':22,'x':11,'a':33,'b':44})  # 11 22 {'a': 33, 'b': 44}

# 混用*与**：*args必须在**kwargs之前
def func(*args,**kwargs):
    pass

# 解释下述形式，即函数wrapper的参数特点是什么
# def index(x,y,z):  # 函数定义
#     print(x,y,z)
#
# def wrapper(*args,**kwargs):  # 函数定义
# # args=(1,) kwargs={'y':2,'z':3}
#     index(*args,**kwargs)  # 函数调用
#     # index(*(1,),**{'y':2,'z':3})-->index(1,y=2,z=3)
#
# wrapper(1,y=2,z=3)

# 函数参数补充
# 1.命名关键字参数（了解）
# 在定义函数时，*后定义的参数，如下所示，称之为命名关键字参数
# 特点：命名关键字实参必须按照key=value的形式为其传值
# def func(x,y,*,a,b):  # 其中，a和b称之为命名关键字参数
#     print(x,y)
#     print(a,b)
#
# func(1,2,b=3,a=4)

# 2.组合使用
# 形参顺序：位置形参，默认形参，*args，命名关键字形参，**kwargs
def func(x,y=11,*args,z,**kwargs):
    pass

# 实参顺序：遇见*，**先打散，要求打散后位置实参在前，关键字实参在后。